//Question :https://leetcode.com/problems/group-anagrams/submissions/

//Best Solution
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        int n=strs.size();
        vector<string> input=strs;
        vector<vector<string>> result;
        map< string, vector<string> > table;
        for(int i=0;i<n;i++)
        {
            sort(input[i].begin(),input[i].end());       
            table[input[i]].push_back(strs[i]);
        }
        for(int i=0;i<n;i++)
        {
            if(table[input[i]].size()>0){
            result.push_back(table[input[i]]);
            table.erase(input[i]);
            }
        }
        return result;
    }
};


//Version1
class Solution {
public:
    bool Anagram(string a,string b)
    {
        bool answer=true; char temp;
        map<char,int> t1,t2;
        int n1=a.length(),n2=b.length();
        if(!n1)
        {
            if(!n2) return true;
            else return false;
        }
        else if(!n2)
        {
            if(!n1) return true;
            else return false;
        }
        else{
        for(int i=0;i<n1;i++)  //updating  hashtable for string a
        { 
            if(!t1[a[i]])
                t1[a[i]]=1;
            else t1[a[i]]++;
        }
         for(int i=0;i<n2;i++) //updating hashtable for string b
        { 
            if(!t2[b[i]])
                t2[b[i]]=1;
            else t2[b[i]]++;
        }
        if(n1>n2){
        for(int i=0;i<n1;i++)
        {
            if(t1[a[i]]!=t2[a[i]])
                answer=false;
        }
        }//if
        else
        for(int i=0;i<n2;i++)
        {
            if(t1[b[i]]!=t2[b[i]])
                answer=false;
        }
            
        }//else
        return answer;
    }
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
     vector<vector<string>> result;
        int i,j,n=strs.size();
        map<int ,int> table;
        for(i=0;i<n;i++)
        {
            if(table[i]) continue;
            vector<string> a;
            a.push_back(strs[i]);
            
            for(j=i+1;j<n;j++)
            {
                 if(table[j]) continue;
                if(Anagram(strs[i],strs[j]))
                {a.push_back(strs[j]);table[j]=1;table[i]=1;}
            }
            result.push_back(a);
        }
        return result;
    }

};


//VERSION 2
//Time- O(n^2+nk)  | Space -O(n)

class Solution {
public:
    bool Anagram(map<char,int> t1,map<char,int> t2,string a,string b) //Time - O(n+k) | Space -O(1)
    {   
        bool answer=true; 
        int n1=a.length(),n2=b.length();
        if(!n1)       //O(n)
        {
            if(!n2) return true;
            else return false;
        }
        else if(!n2)  //O(n)
        {
            if(!n1) return true;
            else return false;
        }
else{
        
    if(n1>n2){  //O(k) { k=max length of a string }
        for(int i=0;i<n1;i++)
        {
            if(t1[a[i]]!=t2[a[i]])
                answer=false;
        }
    }//if
    else    //O(k)
        for(int i=0;i<n2;i++)
        {
            if(t1[b[i]]!=t2[b[i]])
                answer=false;
        }
}//else
        return answer;
    }//function
    
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
     vector<vector<string>> result;
        int i,j,k,n=strs.size();
        map<int ,int> table;
        map<char,int> box[n]; // Space= O(26)*n= O(n)
        
        for(i=0;i<n;i++)   //Time-O(n*k)
        {
            int len=strs[i].length();
            for(j=0;j<len;j++)
            {
                if(!box[i][strs[i][j]])
                box[i][strs[i][j]]=1;
                else box[i][strs[i][j]]++;
            }
        }
        
        for(i=0;i<n;i++)  //Time -O(n^2)
        {
            if(table[i]) continue;       
            vector<string> a;
            a.push_back(strs[i]);
            for(j=i+1;j<n;j++)
            {
                if(table[j]) continue;
                if(Anagram( box[i],box[j],strs[i],strs[j]))
                {a.push_back(strs[j]);table[j]=1;}
            }
            result.push_back(a);
        }
        return result;
    } //function
};




















