Question:https://leetcode.com/explore/interview/card/top-interview-questions-easy/97/dynamic-programming/569/

//Iterative solution 
//Time -O(
class Solution {
public:
    int climbStairs(int n) {
        //iterative solution Time-O(n) | Space-O(1)
        int a=1,b=2,c=a+b;
        if(n==1) return a;
        else if(n==2) return b;
        for(int i=4;i<=n;i++)
        {
            a=b;b=c;c=a+b;   
        }
        return c;
    }
};

//Recursive Solution
//Time -O(2^n) | Space- O(1)
class Solution {
public:
    int climbStairs(int n) {
      //Recursive solution
        if(n==1) return 1;
        else if(n==2) return 2;
        else 
            return climbStairs(n-1)+climbStairs(n-2);
            
    }
};

//top down dynamic proggramming solution 
// Time -O(n) | Space -O(n)
class Solution {
public:
    int climbStairs(int n) {
        int dp[n+1]={0};
        if(n==1) return 1;
        else if(n==2) return 2;
        dp[0]=0;dp[1]=1;dp[2]=2;
        for(int i=3;i<=n;i++) //bottom-up dynamic 
        {
            dp[i]=dp[i-1]+dp[i-2];
        }
        return dp[n];        
    }
};

//bottom up dynamic programming solution
// Time -O(n) | Space -O(n)
class Solution {
public:
    int func(int n,int dp[])
    {
        if(dp[n]>0) return dp[n];
        else{
            dp[n]=func(n-1,dp)+func(n-2,dp);
            return dp[n];
        }
    }
    int climbStairs(int n) {
        int dp[n+3]={0};
        dp[0]=0;dp[1]=1;dp[2]=2;
        return func( n, dp);
    }
};

